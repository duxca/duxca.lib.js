// Generated by CoffeeScript 1.12.2
(function() {
  var crossProduct, delaunay, hit, math, strokeArc, strokeTriangle;

  console.clear();

  math = mathjs();

  $(function() {
    var cnv, ctx, i, pts, tris, update;
    cnv = document.getElementById("cnv");
    cnv.width = 400;
    cnv.height = 400;
    ctx = cnv.getContext("2d");
    pts = (function() {
      var j, results;
      results = [];
      for (i = j = 1; j <= 10; i = ++j) {
        results.push([Math.random() * cnv.width, Math.random() * cnv.height]);
      }
      return results;
    })();
    tris = delaunay(pts);
    (update = function() {
      cnv.width = cnv.width;
      pts.forEach(function(pt) {
        return strokeArc(cnv, ctx, pt);
      });
      return tris.forEach(function(tri) {
        return strokeTriangle(cnv, ctx, tri);
      });
    })();
    return $("#cnv").click(function(ev) {
      var ct;
      ct = [ev.offsetX, ev.offsetY];
      update();
      return tris.forEach(function(tri) {
        if (hit(ct, tri)) {
          ctx.strokeStyle = "#f00";
          ctx.beginPath();
          ctx.moveTo(ct[0], ct[1]);
          ctx.lineTo(tri[0][0], tri[0][1]);
          ctx.moveTo(ct[0], ct[1]);
          ctx.lineTo(tri[1][0], tri[1][1]);
          ctx.moveTo(ct[0], ct[1]);
          ctx.lineTo(tri[2][0], tri[2][1]);
          ctx.closePath();
          return ctx.stroke();
        }
      });
    });
  });

  hit = function(ct, tri) {
    var arr;
    arr = [crossProduct(math.subtract(tri[0], tri[1]), math.subtract(tri[0], ct)), crossProduct(math.subtract(tri[1], tri[2]), math.subtract(tri[1], ct)), crossProduct(math.subtract(tri[2], tri[0]), math.subtract(tri[2], ct))];
    return arr.every(function(pt) {
      return pt[2] < 0;
    }) || arr.every(function(pt) {
      return pt[2] > 0;
    });
  };

  crossProduct = function(pt1, pt2) {
    var ref;
    ref = [pt1.concat(0), pt2.concat(0)], pt1 = ref[0], pt2 = ref[1];
    return [pt1[1] * pt2[2] - pt1[2] * pt2[1], pt1[2] * pt2[0] - pt1[0] * pt2[2], pt1[0] * pt2[1] - pt1[1] * pt2[0]];
  };

  strokeTriangle = function(cnv, ctx, arg) {
    var a, b, c;
    a = arg[0], b = arg[1], c = arg[2];
    ctx.beginPath();
    ctx.moveTo(a[0], a[1]);
    ctx.lineTo(b[0], b[1]);
    ctx.lineTo(c[0], c[1]);
    ctx.closePath();
    return ctx.stroke();
  };

  strokeArc = function(cnv, ctx, pt, r) {
    if (r == null) {
      r = 4;
    }
    ctx.beginPath();
    ctx.arc(pt[0], pt[1], r, 0, 2 * Math.PI, true);
    ctx.closePath();
    return ctx.stroke();
  };

  delaunay = function(pts) {
    var i, ids, j, ref, results;
    ids = Delaunay.triangulate(pts);
    results = [];
    for (i = j = 0, ref = ids.length; j < ref; i = j += 3) {
      results.push([pts[ids[i]], pts[ids[i + 1]], pts[ids[i + 2]]]);
    }
    return results;
  };

}).call(this);
