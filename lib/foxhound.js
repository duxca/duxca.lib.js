// Generated by CoffeeScript 1.12.2
(function() {
  var Point, arc, cross, main;

  main = function() {
    var cnv, ctx, dog, dogDirection, dogSpeed, draw, fox, foxDirection, foxSpeed, god, height, log, previousDogDirection, running, t, width;
    width = 800;
    height = 600;
    cnv = document.getElementById("cnv");
    cnv.width = width;
    cnv.height = height;
    ctx = cnv.getContext("2d");
    dog = new Point(Math.random() * width, Math.random() * height);
    dogSpeed = 1.1;
    dogDirection = 0;
    previousDogDirection = 0;
    fox = new Point(width / 2, height / 2);
    foxSpeed = 1;
    foxDirection = 0;
    t = 0;
    god = new Point(width / 2, height / 2);
    $("#cnv").mousemove(function(ev) {
      return god = new Point(ev.offsetX, ev.offsetY);
    });
    running = true;
    $("#cnv").click(function() {
      running = !running;
      if (!running) {
        return $("#log").val(JSON.stringify(log, "", "  "));
      }
    });
    log = {
      dogSpeed: dogSpeed,
      dogDirection: dogDirection,
      previousDogDirection: previousDogDirection,
      foxSpeed: foxSpeed,
      foxDirection: foxDirection,
      column: ["foxDirection", "x", "y", "dogDirection", "x", "y", "dogDirectionAcceleration"],
      log: []
    };
    return (draw = function() {
      var _dog, _fox, dogDirectionAcceleration, tmp;
      if (running) {
        cnv.width = cnv.width;
        ctx.strokeStyle = "red";
        tmp = god.minus(fox);
        foxSpeed = god.distance(fox) / 100;
        foxDirection = Math.atan2(tmp.y, tmp.x);
        _fox = fox.plus(new Point(Math.cos(foxDirection), Math.sin(foxDirection)).times(foxSpeed));
        tmp = fox.minus(dog);
        dogDirection = Math.atan2(tmp.y, tmp.x);
        _dog = dog.plus(new Point(Math.cos(dogDirection), Math.sin(dogDirection)).times(dogSpeed));
        dogDirectionAcceleration = dogSpeed * (previousDogDirection - dogDirection) / 1;
        dog = _dog;
        fox = _fox;
        log.log.push([foxDirection, fox.x, fox.y, dogDirection, dog.x, dog.y, dogDirectionAcceleration]);
        t++;
        previousDogDirection = dogDirection;
        ctx.strokeStyle = "red";
        arc(cnv, ctx, fox.x, fox.y);
        arc(cnv, ctx, fox.x, fox.y);
        ctx.strokeStyle = "blue";
        cross(cnv, ctx, dog.x, dog.y);
        cross(cnv, ctx, dog.x, dog.y);
      }
      return requestAnimationFrame(draw);
    })();
  };

  Point = (function() {
    function Point(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    Point.prototype.plus = function(pt) {
      return new Point(this.x + pt.x, this.y + pt.y);
    };

    Point.prototype.minus = function(pt) {
      return new Point(this.x - pt.x, this.y - pt.y);
    };

    Point.prototype.times = function(num) {
      return new Point(num * this.x, num * this.y);
    };

    Point.prototype.distance = function(pt) {
      return Math.sqrt(Math.pow(pt.x - this.x, 2) + Math.pow(pt.y - this.y, 2));
    };

    return Point;

  })();

  cross = function(cnv, ctx, x, y) {
    ctx.beginPath();
    ctx.moveTo(x + 4, y + 4);
    ctx.lineTo(x - 4, y - 4);
    ctx.moveTo(x - 4, y + 4);
    ctx.lineTo(x + 4, y - 4);
    return ctx.stroke();
  };

  arc = function(cnv, ctx, x, y) {
    ctx.beginPath();
    ctx.arc(x, y, 4, 0, 2 * Math.PI, false);
    return ctx.stroke();
  };

  console.clear();

  main();

}).call(this);
