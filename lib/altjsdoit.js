// Generated by CoffeeScript 1.12.2
(function() {
  var Configure;

  $(function() {
    return $("#hash").change(function(ev) {
      var altcss, althtml, altjs, config, dic, ref;
      dic = (ref = Configure.decodeHash(ev.target.value), config = ref.config, altjs = ref.altjs, althtml = ref.althtml, altcss = ref.altcss, ref);
      $("#script").val(altjs);
      $("#markup").val(althtml);
      $("#style").val(altcss);
      $("#config").val(JSON.stringify(config, null, "  "));
      return console.dir(dic);
    });
  });

  Configure = (function() {
    var decodeURIQuery, encodeURIQuery, pwd, unzipDataURI, zipDataURI;

    function Configure() {}

    pwd = location.protocol + '//' + location.hostname + location.port + location.pathname;

    zipDataURI = function(dic) {
      var key, val, zip;
      zip = new JSZip();
      for (key in dic) {
        val = dic[key];
        zip.file(key, val);
      }
      return zip.generate({
        compression: "DEFLATE"
      });
    };

    unzipDataURI = function(base64) {
      var files, hash, key, val, zip;
      zip = new JSZip();
      files = zip.load(base64, {
        base64: true
      }).files;
      hash = {};
      for (key in files) {
        val = files[key];
        hash[key] = zip.file(key).asText();
      }
      return hash;
    };

    encodeURIQuery = function(dic) {
      var key, val;
      return [
        (function() {
          var results;
          results = [];
          for (key in dic) {
            val = dic[key];
            results.push(key + "=" + encodeURIComponent(val));
          }
          return results;
        })()
      ].join("&");
    };

    decodeURIQuery = function(query) {
      return query.split("&").map(function(a) {
        var b;
        b = a.split("=");
        return [b[0], b.slice(1).join("=")];
      }).reduce((function(a, b) {
        a[b[0]] = decodeURIComponent(b[1]);
        return a;
      }), {});
    };

    Configure.decodeHash = function(hash) {
      var __config, _config, config, key, markup, ref, script, style, zip;
      config = {};
      zip = decodeURIQuery(hash.slice(1)).zip;
      if (zip != null) {
        ref = unzipDataURI(zip), _config = ref.config, script = ref.script, markup = ref.markup, style = ref.style;
        __config = JSON.parse(_config);
        if (!!__config) {
          for (key in __config) {
            config[key] = __config[key];
          }
        }
      }
      return {
        config: config,
        altjs: script || null,
        althtml: markup || null,
        altcss: style || null
      };
    };

    Configure.encodeHash = function(dic) {
      return pwd + "#" + encodeURIQuery({
        zip: zipDataURI(dic)
      });
    };

    return Configure;

  })();

}).call(this);
