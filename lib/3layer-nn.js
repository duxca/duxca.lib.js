// Generated by CoffeeScript 1.12.2
(function() {
  var cnv, ctx, i, input, randoms, recur, sigmoid, strokeArray, train, weight0, weight1, weight2;

  console.clear();

  strokeArray = function(cnv, ctx, ary, flagX, flagY) {
    var i, k, ref, zoomX, zoomY;
    if (flagX == null) {
      flagX = false;
    }
    if (flagY == null) {
      flagY = false;
    }
    zoomX = !flagX ? 1 : cnv.width / ary.length;
    zoomY = !flagY ? 1 : cnv.height / Math.max.apply(null, ary);
    ctx.beginPath();
    ctx.moveTo(0, cnv.height - ary[0] * zoomY);
    for (i = k = 1, ref = ary.length; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {
      ctx.lineTo(zoomX * i, cnv.height - ary[i] * zoomY);
    }
    return ctx.stroke();
  };

  sigmoid = function(x) {
    return 1 / (1 + Math.exp(-x));
  };

  randoms = function(m, n) {
    var i, j, k, ref, results;
    results = [];
    for (j = k = 1, ref = m; 1 <= ref ? k <= ref : k >= ref; j = 1 <= ref ? ++k : --k) {
      results.push((function() {
        var l, ref1, results1;
        results1 = [];
        for (i = l = 1, ref1 = n; 1 <= ref1 ? l <= ref1 : l >= ref1; i = 1 <= ref1 ? ++l : --l) {
          results1.push(0);
        }
        return results1;
      })());
    }
    return results;
  };

  input = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k <= 200; i = ++k) {
      results.push(i);
    }
    return results;
  })();

  input = input.map(function(x) {
    return x / 200;
  });

  input = input.map(function(x) {
    return 2 * Math.PI * x;
  });

  input = input.map(function(x) {
    return x - Math.PI;
  });

  train = input.map(function(x) {
    return Math.sin(x) / 2 + 0.5;
  });

  weight0 = randoms(input.length, input.length);

  weight1 = randoms(input.length, input.length);

  weight2 = randoms(input.length, input.length);

  cnv = document.createElement("canvas");

  cnv.width = 320;

  cnv.height = 320;

  ctx = cnv.getContext("2d");

  document.body.appendChild(cnv);

  (recur = function() {
    var a, b, e1, output;
    cnv.width = cnv.width;
    a = math.multiply(weight0, input).map(sigmoid);
    b = math.multiply(weight1, a).map(sigmoid);
    output = math.multiply(weight2, b).map(sigmoid);
    strokeArray(cnv, ctx, train.map(function(x, i) {
      return x * 100 + 160;
    }), true);
    strokeArray(cnv, ctx, output.map(function(x, i) {
      return x * 100 + 160;
    }), true);
    e1 = output.map(function(_, i) {
      return a[i] * (train[i] - output[i]) * output[i] * (1 - output[i]);
    });
    weight2 = weight1.map(function(w, i) {
      return w.map(function(_, j) {
        return weight2[i][j] + 0.1 * e1[i];
      });
    });
    weight1 = weight1.map(function(w, i) {
      return w.map(function(_, j) {
        return weight1[i][j] + a[j] * e1[i] * weight2[i][j] * b[i] * (1 - b[i]);
      });
    });
    weight0 = weight0.map(function(w, i) {
      return w.map(function(_, j) {
        return weight0[i][j] + input[j] * e1[i] * weight2[i][j] * weight1[i][j] * a[i] * (1 - a[i]);
      });
    });
    return setTimeout(recur, 0);
  })();

}).call(this);
