module Timer
  ( Timer(),
    Timeout(),
    Milliseconds(),
    EffTimer(),

    timeout,
    clearTimeout
  ) where

import Control.Monad.Eff
import Control.Monad.Trans
import Control.Monad.Cont.Trans

foreign import data Timer     :: !
foreign import data Timeout   :: *

type Milliseconds = Number

type EffTimer e a = Eff (timer :: Timer | e) a

foreign import setTimeout :: forall a e. Milliseconds -> EffTimer e a -> EffTimer e Timeout
foreign import clearTimeout  :: forall e. Timeout -> EffTimer e Prelude.Unit

delay :: forall eff. Number -> ContT Unit (Eff (timeout :: Timeout | eff)) Unit
delay n = callCC \cont ->
  lift $ setTimeout n (runContT (cont unit) (\_ -> return unit))

--
delay :: Number -> ((a -> ContT r m b) -> ContT r m a) -> ContT r m a
callCC ::          ((a -> ContT r m b) -> ContT r m a) -> ContT r m a
  \cont -> lift $ setTimeout n (runContT (cont unit) (\_ -> return unit)) :: (a -> ContT r m b) -> ContT r m a
    lift (setTimeout n (runContT (cont unit) (\_ -> return unit))) :: ContT r m a
      lift :: (Monad m) => m a -> t m a
        (setTimeout n (runContT (cont unit) (\_ -> return unit))) :: m a
          setTimeout :: Number -> m r -> m a
            n :: Number
            (runContT (cont unit) (\_ -> return unit)) :: m r
              runContT :: ContT r m a -> (a -> m r) -> m r
                (cont unit) :: ContT r m b
                  cont :: (a -> ContT r m b)
                  unit :: Unit
                (\_ -> return unit) :: a -> m Unit
                  return :: (Applicative m) => a -> m a
                  unit :: Unit


delay ::forall eff. Number -> ContT Unit (Eff (timeout :: Timeout | eff)) Unit
callCC :: forall r m a b. ((a -> ContT r m b) -> ContT r m a) -> ContT r m a
runContT :: forall r m a. ContT r m a -> (a -> m r) -> m r
return :: forall m a. (Applicative m) => a -> m Unit
lift :: forall m a. (Monad m) => m a -> t m a
unit :: Unit
