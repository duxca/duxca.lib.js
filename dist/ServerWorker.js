// Generated by CoffeeScript 1.10.0

/*
ServerWorker - simple request/response inline worker

InlineServerWorker
  - provide worker thread for heavy process
IframeServerWorker
  - provide UI thread for DOM sandbox

* usgae:
```
  worker = new (InlineServerWorker||IframeServerWorker) [], (emitter)->
    emitter.on "echo", (data, reply)->
      reply(data+"world")
  worker.load().then ->
    worker.request("echo", "hello").then (data)->
      console.log data
      worker.terminate()
  .catch (err)-> console.error err
```
 */

(function() {
  var EVENT_EMITTER_3_SOURCE, IFrameServerWorker, InlineServerWorker, createErrorLogger, getArrayBuffer, hash,
    slice = [].slice;

  EVENT_EMITTER_3_SOURCE = (/^function\s*[^\(]*\([^\)]*\)\s*\{([\s\S]*)\}$/gm.exec("" + EVENT_EMITTER_3) || ["", ""])[1];

  InlineServerWorker = (function() {
    function InlineServerWorker() {
      var consts, fn, importFunctions, importScriptsURLs;
      importScriptsURLs = arguments[0], importFunctions = arguments[1], fn = arguments[2], consts = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      this.importScriptsURLs = [];
      this.importFunctions = [];
      if (importScriptsURLs instanceof Function) {
        this.fn = importScriptsURLs;
        this.consts = [].concat(importFunctions, fn, consts);
      } else if (importFunctions instanceof Function) {
        this.importScriptsURLs = importScriptsURLs;
        this.fn = importFunctions;
        this.consts = [].concat(fn, consts);
      } else {
        this.importScriptsURLs = importScriptsURLs;
        this.importFunctions = importFunctions;
        this.fn = fn;
        this.consts = [].concat(consts);
      }
      this.error = createErrorLogger(this.fn);
      this.urls = [];
      this.worker = null;
    }

    InlineServerWorker.prototype.load = function() {
      return Promise.all(this.importScriptsURLs.map((function(_this) {
        return function(url) {
          return getArrayBuffer(url).then(function(buffer) {
            return URL.createObjectURL(new Blob([buffer], {
              "type": "text/javascript"
            }));
          });
        };
      })(this))).then((function(_this) {
        return function(urls) {
          var url;
          _this.urls = _this.urls.concat(urls);
          _this.urls.push(url = URL.createObjectURL(new Blob([
            (urls.map(function(url) {
              return "self.importScripts('" + url + "');";
            }).join("\n")) + "\n" + EVENT_EMITTER_3_SOURCE + "\n" + (_this.importFunctions.join("\n")) + "\n(" + _this.fn + ".apply(this, " + (function(consts) {
              var emitter;
              emitter = new EventEmitter();
              self.onmessage = function(arg) {
                var data, event, ref, session;
                ref = arg.data, event = ref.event, data = ref.data, session = ref.session;
                return emitter.emit(event, data, function(data) {
                  return self.postMessage({
                    data: data,
                    session: session
                  });
                });
              };
              return [emitter].concat(consts);
            }) + "([" + (_this.consts.map(function(a) {
              return JSON.stringify(a);
            }).join(",")) + "])));"
          ], {
            type: "text/javascript"
          })));
          _this.worker = new Worker(url);
          return _this;
        };
      })(this));
    };

    InlineServerWorker.prototype.request = function(event, data) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var _err, _msg, msg;
          msg = {
            event: event,
            data: data,
            session: hash()
          };
          _this.worker.addEventListener("error", _err = function(ev) {
            _this.worker.removeEventListener("error", _err);
            _this.worker.removeEventListener("message", _msg);
            _this.error(ev);
            return reject(ev);
          });
          _this.worker.addEventListener("message", _msg = function(ev) {
            if (msg.session === ev.data.session) {
              _this.worker.removeEventListener("error", _err);
              _this.worker.removeEventListener("message", _msg);
              return resolve(ev.data.data);
            }
          });
          _this.worker.postMessage(msg);
        };
      })(this));
    };

    InlineServerWorker.prototype.unload = function() {
      this.urls.forEach(function(url) {
        return URL.revokeObjectURL(url);
      });
      this.worker.terminate();
      this.worker = null;
    };

    return InlineServerWorker;

  })();

  IFrameServerWorker = (function() {
    function IFrameServerWorker() {
      var consts, fn, importFunctions, importScriptsURLs;
      importScriptsURLs = arguments[0], importFunctions = arguments[1], fn = arguments[2], consts = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      this.importScriptsURLs = [];
      this.importFunctions = [];
      if (importScriptsURLs instanceof Function) {
        this.fn = importScriptsURLs;
        this.consts = [].concat(importFunctions, fn, consts);
      } else if (importFunctions instanceof Function) {
        this.importScriptsURLs = importScriptsURLs;
        this.fn = importFunctions;
        this.consts = [].concat(fn, consts);
      } else {
        this.importScriptsURLs = importScriptsURLs;
        this.importFunctions = importFunctions;
        this.fn = fn;
        this.consts = [].concat(consts);
      }
      this.error = createErrorLogger(this.fn);
      this.iframe = document.createElement("iframe");
      this.iframe.setAttribute("style", "position: absolute;\ntop: 0px;\nleft: 0px;\nwidth: 0px;\nheight: 0px;\nborder: 0px;\nmargin: 0px;\npadding: 0px;");
    }

    IFrameServerWorker.prototype.load = function() {
      var prm;
      document.body.appendChild(this.iframe);
      this.iframe.contentDocument.open();
      this.iframe.contentDocument.write((this.importScriptsURLs.map(function(url) {
        return "<script src='" + url + "'>\x3c/script>";
      }).join("\n")) + "\n<script>\n" + EVENT_EMITTER_3_SOURCE + "\n" + (this.importFunctions.join("\n")) + "\n(" + this.fn + ".apply(this, " + (function(consts) {
        var emitter;
        emitter = new EventEmitter();
        window.addEventListener("message", function(ev) {
          var data, event, ref, session, source;
          (ref = ev.data, event = ref.event, data = ref.data, session = ref.session), source = ev.source;
          if (event === "__echo__") {
            source.postMessage({
              data: data,
              session: session
            }, "*");
            window.parent.postMessage({
              data: data,
              session: session
            }, "*");
          }
          return emitter.emit(event, data, function(data) {
            source.postMessage({
              data: data,
              session: session
            }, "*");
            return window.parent.postMessage({
              data: data,
              session: session
            }, "*");
          });
        });
        return [emitter].concat(consts);
      }) + "([" + (this.consts.map(function(a) {
        return JSON.stringify(a);
      }).join(",")) + "])));\n\x3c/script>");
      prm = new Promise((function(_this) {
        return function(resolve) {
          return _this.iframe.addEventListener("load", function() {
            return resolve(_this);
          });
        };
      })(this));
      this.iframe.contentDocument.close();
      return prm;
    };

    IFrameServerWorker.prototype.request = function(event, data) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var _err, _msg, msg;
          msg = {
            event: event,
            data: data,
            session: hash()
          };
          _this.iframe.contentWindow.addEventListener("error", _err = function(ev) {
            _this.iframe.contentWindow.removeEventListener("error", _err);
            window.removeEventListener("message", _msg);
            _this.error(ev);
            return reject(ev);
          });
          window.addEventListener("message", _msg = function(ev) {
            if (msg.session === ev.data.session) {
              _this.iframe.contentWindow.removeEventListener("error", _err);
              window.removeEventListener("message", _msg);
              return resolve(ev.data.data);
            }
          });
          _this.iframe.contentWindow.postMessage(msg, "*");
        };
      })(this));
    };

    IFrameServerWorker.prototype.unload = function() {
      var iframe;
      this.iframe.removeAttribute("src");
      this.iframe.removeAttribute("srcdoc");
      this.iframe.contentWindow.removeEventListener();
      document.body.removeChild(this.iframe);
      iframe = null;
    };

    return IFrameServerWorker;

  })();

  hash = function() {
    return Math.round(Math.random() * Math.pow(16, 8)).toString(16);
  };

  createErrorLogger = function(code) {
    return function(ev) {
      console.error(ev.message + "\n  at " + ev.filename + ":" + ev.lineno + ":" + ev.colno);
      ev.error && console.error(ev.error.stack);
      return console.info("(" + code + "}());".slice(0, 300) + "\n...");
    };
  };

  getArrayBuffer = function(url) {
    return new Promise(function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        if (200 <= xhr.status && xhr.status < 300) {
          if (xhr.response.error != null) {
            return reject(new Error(xhr.response.error.message));
          } else {
            return resolve(xhr.response);
          }
        } else {
          return reject(new Error(xhr.status));
        }
      });
      xhr.open("GET", url);
      xhr.responseType = "arraybuffer";
      return xhr.send();
    });
  };

  if ('undefined' !== typeof module) {
    module.exports.InlineServerWorker = InlineServerWorker;
    module.exports.IFrameServerWorker = IFrameServerWorker;
  }

  this.InlineServerWorker = InlineServerWorker;

  this.IFrameServerWorker = IFrameServerWorker;

}).call(this);
function EVENT_EMITTER_3(){
'use strict';

//
// We store our EE objects in a plain object whose properties are event names.
// If `Object.create(null)` is not supported we prefix the event names with a
// `~` to make sure that the built-in object properties are not overridden or
// used as an attack vector.
// We also assume that `Object.create(null)` is available when the event name
// is an ES6 Symbol.
//
var prefix = typeof Object.create !== 'function' ? '~' : false;

/**
 * Representation of a single EventEmitter function.
 *
 * @param {Function} fn Event handler to be called.
 * @param {Mixed} context Context for function execution.
 * @param {Boolean} once Only emit once
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() { /* Nothing to set */ }

/**
 * Holds the assigned EventEmitters by name.
 *
 * @type {Object}
 * @private
 */
EventEmitter.prototype._events = undefined;

/**
 * Return a list of assigned event listeners.
 *
 * @param {String} event The events that should be listed.
 * @param {Boolean} exists We only need to know if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event, exists) {
  var evt = prefix ? prefix + event : event
    , available = this._events && this._events[evt];

  if (exists) return !!available;
  if (!available) return [];
  if (available.fn) return [available.fn];

  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    ee[i] = available[i].fn;
  }

  return ee;
};

/**
 * Emit an event to all registered event listeners.
 *
 * @param {String} event The name of the event.
 * @returns {Boolean} Indication if we've emitted an event.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events || !this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if ('function' === typeof listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this)
    , evt = prefix ? prefix + event : event;

  if (!this._events) this._events = prefix ? {} : Object.create(null);
  if (!this._events[evt]) this._events[evt] = listener;
  else {
    if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [
      this._events[evt], listener
    ];
  }

  return this;
};

/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true)
    , evt = prefix ? prefix + event : event;

  if (!this._events) this._events = prefix ? {} : Object.create(null);
  if (!this._events[evt]) this._events[evt] = listener;
  else {
    if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [
      this._events[evt], listener
    ];
  }

  return this;
};

/**
 * Remove event listeners.
 *
 * @param {String} event The event we want to remove.
 * @param {Function} fn The listener that we need to find.
 * @param {Mixed} context Only remove listeners matching this context.
 * @param {Boolean} once Only remove once listeners.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events || !this._events[evt]) return this;

  var listeners = this._events[evt]
    , events = [];

  if (fn) {
    if (listeners.fn) {
      if (
           listeners.fn !== fn
        || (once && !listeners.once)
        || (context && listeners.context !== context)
      ) {
        events.push(listeners);
      }
    } else {
      for (var i = 0, length = listeners.length; i < length; i++) {
        if (
             listeners[i].fn !== fn
          || (once && !listeners[i].once)
          || (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }
    }
  }

  //
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if (events.length) {
    this._events[evt] = events.length === 1 ? events[0] : events;
  } else {
    delete this._events[evt];
  }

  return this;
};

/**
 * Remove all listeners or only the listeners for the specified event.
 *
 * @param {String} event The event want to remove all listeners for.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  if (!this._events) return this;

  if (event) delete this._events[prefix ? prefix + event : event];
  else this._events = prefix ? {} : Object.create(null);

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}
}
